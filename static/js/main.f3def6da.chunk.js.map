{"version":3,"sources":["utility.ts","Dinner.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["uuid","hex","Date","now","repeat","replace","Math","random","value","floor","toString","StyledTableCell","withStyles","theme","createStyles","head","backgroundColor","palette","grey","A400","color","common","white","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","Dinner","props","handlePersonChange","event","setState","personToAdd","target","handleItemNameChange","itemNameToAdd","handleItemPriceChange","itemPriceToAdd","handleTaxChange","tax","parseFloat","handleTipChange","tip","handleLinkChange","split","personId","itemId","links","state","undefined","personIndex","indexOf","push","splice","addPerson","preventDefault","people","id","name","trim","removePerson","index","Object","keys","addItem","items","price","removeItem","getLinkStatus","includes","getAllFoodPrice","map","i","reduce","a","b","getPersonFoodPrice","personItems","personIds","itemPrice","filter","item","peopleCount","length","entries","getPersonTax","totalPrice","totalTax","getPersonTip","totalTip","getTotalPrice","getPersonTotal","bind","Box","List","dense","this","person","ListItem","key","ListItemAvatar","Avatar","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","onClick","TextField","label","required","onChange","toFixed","type","TableContainer","component","Paper","Table","TableHead","TableBody","itemIndex","itemName","Checkbox","checked","Input","placeholder","startAdornment","InputAdornment","position","Divider","renderPeople","renderItems","renderBill","React","Component","App","Container","className","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3def6da.chunk.js","sourcesContent":["export const uuid = () => {\n  return hex(Date.now() / 1000) + ' '.repeat(5).replace(/./g, () => hex(Math.random() * 16))\n};\n\nconst hex = (value: number) => {\n  return Math.floor(value).toString(16)\n};\n","import React from 'react';\nimport { uuid } from './utility';\nimport { createStyles, Theme, withStyles } from '@material-ui/core/styles';\nimport {\n  Avatar,\n  Box,\n  Checkbox,\n  Divider,\n  IconButton,\n  Input,\n  InputAdornment,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemSecondaryAction,\n  ListItemText,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n} from '@material-ui/core';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport AddIcon from '@material-ui/icons/Add';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FastfoodIcon from '@material-ui/icons/Fastfood';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\n\nconst ID_DELIMITER = '\\t';\n\ntype Item = {\n  id: string;\n  price: number;\n  name?: string;\n}\n\ntype Person = {\n  id: string;\n  name: string;\n}\n\ninterface IProps {\n}\n\ninterface IState {\n  items: Array<Item>;\n  people: Array<Person>;\n  links: {\n    [itemId: string]: string[],\n  };\n\n  tax: number;\n  tip: number;\n  personToAdd: string;\n  itemNameToAdd: string;\n  itemPriceToAdd: string;\n}\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n  createStyles({\n    head: {\n      backgroundColor: theme.palette.grey.A400,\n      color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  }),\n)(TableCell);\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.background.default,\n      },\n    },\n  }),\n)(TableRow);\n\nclass Dinner extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      items: [\n        { id: 'drink', name: 'Drink', price: 12.00 },\n        { id: 'fish', name: 'Fish', price: 12.00 },\n      ],\n      people: [\n        { id: 'jared', name: 'Jared' },\n        { id: 'liren', name: 'Liren' },\n        { id: 'roshan', name: 'Roshan' },\n        { id: 'sherif', name: 'Sherif' },\n      ],\n      links: {},\n      tax: 0,\n      tip: 0,\n      personToAdd: '',\n      itemNameToAdd: '',\n      itemPriceToAdd: '',\n    };\n\n    this.handlePersonChange = this.handlePersonChange.bind(this);\n    this.handleItemNameChange = this.handleItemNameChange.bind(this);\n    this.handleItemPriceChange = this.handleItemPriceChange.bind(this);\n    this.handleLinkChange = this.handleLinkChange.bind(this);\n\n    this.addPerson = this.addPerson.bind(this);\n    this.removePerson = this.removePerson.bind(this);\n\n    this.addItem = this.addItem.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n\n    this.getLinkStatus = this.getLinkStatus.bind(this);\n  }\n\n  handlePersonChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ personToAdd: event.target.value });\n  };\n\n  handleItemNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ itemNameToAdd: event.target.value });\n  };\n\n  handleItemPriceChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ itemPriceToAdd: event.target.value });\n  };\n\n  handleTaxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ tax: parseFloat(event.target.value) });\n  };\n\n  handleTipChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ tip: parseFloat(event.target.value) });\n  };\n\n  handleLinkChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const [personId, itemId] = event.target.value.split(ID_DELIMITER);\n    const links = this.state.links;\n    if (links[itemId] === undefined) {\n      links[itemId] = [personId];\n    } else {\n      const personIndex = links[itemId].indexOf(personId);\n      if (personIndex === -1) {\n        links[itemId].push(personId);\n      } else {\n        links[itemId].splice(personIndex, 1);\n      }\n    }\n    this.setState({ links });\n  };\n\n  addPerson = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (this.state.personToAdd) {\n      const people = this.state.people;\n      people.push({\n        id: uuid(),\n        name: this.state.personToAdd.trim(),\n      });\n      this.setState({\n        people,\n        personToAdd: '',\n      });\n    }\n  };\n\n  removePerson = (event: React.MouseEvent<HTMLButtonElement>, index: number) => {\n    event.preventDefault();\n    const links = this.state.links;\n    const people = this.state.people;\n    const personId = people[index].id;\n    for (const itemId of Object.keys(links)) {\n      const personIndex = links[itemId].indexOf(personId);\n      if (personIndex !== -1) {\n        links[itemId].splice(personIndex, 1);\n      }\n    }\n    people.splice(index, 1);\n    this.setState({ links, people });\n  };\n\n  addItem = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (this.state.itemPriceToAdd) {\n      const items = this.state.items;\n      items.push({\n        id: uuid(),\n        name: this.state.itemNameToAdd.trim(),\n        price: parseFloat(this.state.itemPriceToAdd),\n      });\n      this.setState({\n        items,\n        itemNameToAdd: '',\n        itemPriceToAdd: '',\n      });\n    }\n  };\n\n  removeItem = (event: React.MouseEvent<HTMLButtonElement>, index: number) => {\n    event.preventDefault();\n    const links = this.state.links;\n    const items = this.state.items;\n    delete links[items[index].id];\n    items.splice(index, 1);\n    this.setState({ links, items });\n  };\n\n  getLinkStatus = (personId: string, itemId: string): boolean => {\n    return this.state.links[itemId] !== undefined && this.state.links[itemId].includes(personId);\n  };\n\n  getAllFoodPrice = (): number => {\n    return this.state.items.map(i => i.price).reduce((a, b) => a + b, 0);\n  };\n\n  getPersonFoodPrice = (personId: string): number => {\n    const personItems: Array<{\n      itemPrice: number;\n      peopleCount: number;\n    }> = [];\n\n    for (const [itemId, personIds] of Object.entries(this.state.links)) {\n      if (personIds.includes(personId)) {\n        const itemPrice = this.state.items.filter(item => item.id === itemId)[0].price;\n        const peopleCount = personIds.length;\n        personItems.push({ itemPrice, peopleCount });\n      }\n    }\n\n    return personItems\n      .map(({ itemPrice, peopleCount }) => itemPrice / peopleCount)\n      .reduce((a, b) => a + b, 0);\n  };\n\n  getPersonTax = (personId: string): number => {\n    const totalPrice = this.getAllFoodPrice();\n    if (totalPrice === 0) {\n      return 0;\n    }\n    const totalTax = this.state.tax;\n    const personPrice = this.getPersonFoodPrice(personId);\n    return personPrice * totalTax / totalPrice;\n  };\n\n  getPersonTip = (personId: string): number => {\n    const totalPrice = this.getAllFoodPrice();\n    if (totalPrice === 0) {\n      return 0;\n    }\n    const totalTip = this.state.tip;\n    const personPrice = this.getPersonFoodPrice(personId);\n    return personPrice * totalTip / totalPrice;\n  };\n\n  getTotalPrice = (): number => {\n    return this.getAllFoodPrice() + this.state.tax + this.state.tip;\n  };\n\n  getPersonTotal = (personId: string): number => {\n    return this.getPersonFoodPrice(personId)\n      + this.getPersonTax(personId)\n      + this.getPersonTip(personId);\n  };\n\n  renderPeople() {\n    return (\n      <Box>\n        <List dense={false}>\n          {this.state.people.map(({ name: person }, index: number) => (\n            <ListItem key={'person-' + index}>\n              <ListItemAvatar>\n                <Avatar>\n                  <AccountCircleIcon/>\n                </Avatar>\n              </ListItemAvatar>\n\n              <ListItemText primary={person}/>\n\n              <ListItemSecondaryAction>\n                <IconButton\n                  edge=\"start\"\n                  onClick={(event: React.MouseEvent<HTMLButtonElement>) => this.removePerson(event, index)}\n                >\n                  <DeleteIcon/>\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n          <ListItem key=\"person-add\">\n            <ListItemAvatar>\n              <Avatar>\n                <AccountCircleIcon/>\n              </Avatar>\n            </ListItemAvatar>\n\n            <TextField\n              label=\"Person Name\"\n              value={this.state.personToAdd}\n              required={true}\n              onChange={this.handlePersonChange}\n            />\n\n            <ListItemSecondaryAction>\n              <IconButton edge=\"start\" onClick={this.addPerson}>\n                <PersonAddIcon/>\n              </IconButton>\n            </ListItemSecondaryAction>\n          </ListItem>\n        </List>\n      </Box>\n    );\n  }\n\n  renderItems() {\n    return (\n      <Box>\n        <List dense={false}>\n          {this.state.items.map(({ name, price }, index: number) => (\n            <ListItem key={'person-' + index}>\n              <ListItemAvatar>\n                <Avatar>\n                  <FastfoodIcon/>\n                </Avatar>\n              </ListItemAvatar>\n\n              <ListItemText primary={'$' + price.toFixed(2) + (name ? ' ' + name : '')}/>\n\n              <ListItemSecondaryAction>\n                <IconButton\n                  edge=\"start\"\n                  onClick={(event: React.MouseEvent<HTMLButtonElement>) => this.removeItem(event, index)}\n                >\n                  <DeleteIcon/>\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n          <ListItem key=\"person-add\">\n            <ListItemAvatar>\n              <Avatar>\n                <FastfoodIcon/>\n              </Avatar>\n            </ListItemAvatar>\n\n            <TextField\n              label=\"Item Price\"\n              type=\"number\"\n              value={this.state.itemPriceToAdd}\n              required={true}\n              onChange={this.handleItemPriceChange}\n            />\n            &nbsp;&nbsp;&nbsp;\n            <TextField\n              label=\"Item Name\"\n              value={this.state.itemNameToAdd}\n              required={false}\n              onChange={this.handleItemNameChange}\n            />\n\n            <ListItemSecondaryAction>\n              <IconButton edge=\"start\" onClick={this.addItem}>\n                <AddIcon/>\n              </IconButton>\n            </ListItemSecondaryAction>\n          </ListItem>\n        </List>\n      </Box>\n    );\n  }\n\n  renderBill() {\n    return (\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <StyledTableRow>\n              <StyledTableCell key=\"item\">Item</StyledTableCell>\n              <StyledTableCell key=\"price\">Price</StyledTableCell>\n\n              {this.state.people.map(({ name: person }, index: number) =>\n                <StyledTableCell key={'person-' + index}>{person}</StyledTableCell>)\n              }\n            </StyledTableRow>\n          </TableHead>\n\n          <TableBody>\n            {this.state.items.map(({ id: itemId, name: itemName, price: itemPrice }, itemIndex: number) =>\n              <StyledTableRow key={'item-' + itemIndex}>\n                <StyledTableCell>{itemName}</StyledTableCell>\n                <StyledTableCell>${itemPrice.toFixed(2)}</StyledTableCell>\n                {this.state.people.map(({ id: personId, name: person }, personIndex: number) => (\n                  <StyledTableCell key={'item-person-' + personIndex}>\n                    <Checkbox\n                      checked={this.getLinkStatus(personId, itemId)}\n                      value={personId + ID_DELIMITER + itemId}\n                      color=\"primary\"\n                      onChange={this.handleLinkChange}\n                    />\n                  </StyledTableCell>\n                ))}\n              </StyledTableRow>,\n            )}\n\n            <StyledTableRow key={'dinner-total'}>\n              <StyledTableCell>All Food</StyledTableCell>\n              <StyledTableCell>${this.getAllFoodPrice().toFixed(2)}</StyledTableCell>\n              {this.state.people.map(({ id: personId }, personIndex: number) => (\n                <StyledTableCell key={'person-' + personIndex}>\n                  ${this.getPersonFoodPrice(personId).toFixed(2)}\n                </StyledTableCell>\n              ))}\n            </StyledTableRow>\n\n            <StyledTableRow key={'dinner-tax'}>\n              <StyledTableCell>Tax</StyledTableCell>\n              <StyledTableCell>\n                <Input\n                  type=\"number\"\n                  placeholder=\"enter tax amount\"\n                  value={this.state.tax || ''}\n                  required={false}\n                  onChange={this.handleTaxChange}\n                  startAdornment={\n                    <InputAdornment position=\"start\">\n                      <AttachMoneyIcon fontSize=\"small\"/>\n                    </InputAdornment>\n                  }\n                />\n              </StyledTableCell>\n              {this.state.people.map(({ id: personId }, personIndex: number) => (\n                <StyledTableCell key={'tax-person-' + personIndex}>\n                  ${this.getPersonTax(personId).toFixed(2)}\n                </StyledTableCell>\n              ))}\n            </StyledTableRow>\n\n            <StyledTableRow key={'dinner-tip'}>\n              <StyledTableCell>Tip</StyledTableCell>\n              <StyledTableCell>\n                <Input\n                  type=\"number\"\n                  placeholder=\"enter tip amount\"\n                  value={this.state.tip || ''}\n                  required={false}\n                  onChange={this.handleTipChange}\n                  startAdornment={\n                    <InputAdornment position=\"start\">\n                      <AttachMoneyIcon fontSize=\"small\"/>\n                    </InputAdornment>\n                  }\n                />\n              </StyledTableCell>\n              {this.state.people.map(({ id: personId }, personIndex: number) => (\n                <StyledTableCell key={'tip-person-' + personIndex}>\n                  ${this.getPersonTip(personId).toFixed(2)}\n                </StyledTableCell>\n              ))}\n            </StyledTableRow>\n\n            <StyledTableRow key={'dinner-tip'}>\n              <StyledTableCell>Total</StyledTableCell>\n              <StyledTableCell>${this.getTotalPrice().toFixed(2)}</StyledTableCell>\n              {this.state.people.map(({ id: personId }, personIndex: number) => (\n                <StyledTableCell key={'tip-person-' + personIndex}>\n                  ${this.getPersonTotal(personId).toFixed(2)}\n                </StyledTableCell>\n              ))}\n            </StyledTableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n\n  public render() {\n    return (\n      <>\n        <Divider/>\n        <h2>People</h2>\n        {this.renderPeople()}\n        <br/>\n        <Divider/>\n        <br/>\n        <h2>Food</h2>\n        {this.renderItems()}\n        <br/>\n        <Divider/>\n        <br/>\n        <h2>Bill</h2>\n        {this.renderBill()}\n        <br/>\n        <br/>\n      </>\n    );\n  }\n}\n\nexport default Dinner;\n","import React from 'react';\nimport './App.css';\nimport Dinner from './Dinner';\nimport { Container } from '@material-ui/core';\n\nconst App = () => {\n  return (\n    <Container className=\"Dinner\" maxWidth=\"md\">\n      <h1>Dinner Bill</h1>\n      <Dinner/>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}